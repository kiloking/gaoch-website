// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Repair {
  id          Int      @id @default(autoincrement())
  serial_no   String   @unique
  unit        String   // 戶別
  contactName String   // 聯絡人
  phone       String   // 聯絡電話
  content     String   // 維修內容
  date        String   // 填單日期

  status      String   @default("待處理") // 維修單狀態
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[] @relation("RepairImages")

  videoId     Int?
  video       Video?   @relation(fields: [videoId], references: [id] , name: "RepairVideo")

  community_code String // 社區代碼
  community_name String // 社區名稱
  email String? // 電子郵件
  contact_time String  //聯絡時間
  repair_area String //修繕區域
  repair_class String //修繕類別

}

model Work {
  id          Int      @id @default(autoincrement())
  title       String
  images      Image[] @relation("WorkImages")

  bgimgId     Int?
  bgimg       Image?   @relation(fields: [bgimgId], references: [id], name: "WorkBgimg")

  coverImageId Int?
  coverImage  Image?   @relation(fields: [coverImageId], references: [id], name: "WorkCoverImage")
  year        String
  location    String
  description String
  ytVideoUrl  String
  address     String
  area        String
  units       String
  floors      String
  houseTypes  String
  architect   String
  company     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workImages  Work[]     @relation("WorkImages")
  workCoverImage  Work[]     @relation("WorkCoverImage")
  workBgimg       Work[]     @relation("WorkBgimg")
  repairImages  Repair[]     @relation("RepairImages")
  ProjectCoverImage Project[] @relation("ProjectCoverImage")
}

// model video 
model Video {
  id          Int      @id @default(autoincrement())
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  repairVideo      Repair[]     @relation("RepairVideo")
}


model Project {
  id        Int      @id @default(autoincrement())
  title     String
  location  String
  status    String
  coverImageId Int?
  coverImage  Image?   @relation(fields: [coverImageId], references: [id], name: "ProjectCoverImage")
  price     String
  link      String
  base  String //基地位置
  area String //基地面積
  size String //建物坪數
  floors String //樓層
  household String //戶數
  design_company String //設計公司
  construction_company String //施工公司
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  image     String
  url       String   // 新增 url 屬性
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  role          String    @default("user")
  isActive      Boolean   @default(true)
  email         String?
  displayName   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
